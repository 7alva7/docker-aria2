#!/usr/bin/env bash

GET_BASE_PATH() {
    # Aria2下载目录
    DOWNLOAD_PATH='/downloads'
    DOWNLOAD_ANI_PATH=${DOWNLOAD_PATH}/${ANIDIR}
    DOWNLOAD_MOV_PATH=${DOWNLOAD_PATH}/${MOVDIR}
    DOWNLOAD_TVS_PATH=${DOWNLOAD_PATH}/${TVDIR}
    DOWNLOAD_CUS_PATH=${DOWNLOAD_PATH}/${CUSDIR}
    # 日志、配置文件保存路径
    SCRIPT_CONF="/config/文件过滤.conf"
    CF_LOG="/config/文件过滤日志.log"
    MOVE_LOG="/config/move.log"
    DELETE_LOG="/config/delete.log"
    RECYCLE_LOG="/config/recycle.log"

    # ============================================================

    RELATIVE_PATH=${FILE_PATH#${DOWNLOAD_PATH}/}                    # 普通文件路径转换，去掉开头的下载路径。
    RELATIVE_ANI_PATH=${FILE_PATH#${DOWNLOAD_ANI_PATH}/}            # 动画片路径转换，去掉开头的下载路径。
    RELATIVE_MOV_PATH=${FILE_PATH#${DOWNLOAD_MOV_PATH}/}            # 电影路径转换，去掉开头的下载路径。
    RELATIVE_TVS_PATH=${FILE_PATH#${DOWNLOAD_TVS_PATH}/}            # 电视剧、综艺路径转换，去掉开头的下载路径。
    RELATIVE_CUS_PATH=${FILE_PATH#${DOWNLOAD_CUS_PATH}/}            # 自定义路径转换，去掉开头的下载路径。

    CONTRAST_PATH=${DOWNLOAD_PATH}/${RELATIVE_PATH%%/*}             # 普通文件路径对比判断
    CONTRAST_ANI_PATH=${DOWNLOAD_ANI_PATH}/${RELATIVE_ANI_PATH%%/*} # 动画片根文件夹路径对比判断
    CONTRAST_MOV_PATH=${DOWNLOAD_MOV_PATH}/${RELATIVE_MOV_PATH%%/*} # 电影根文件夹路径对比判断
    CONTRAST_TVS_PATH=${DOWNLOAD_TVS_PATH}/${RELATIVE_TVS_PATH%%/*} # 电视剧、综艺根文件夹路径对比判断
    CONTRAST_CUS_PATH=${DOWNLOAD_CUS_PATH}/${RELATIVE_CUS_PATH%%/*} # 自定义路径根文件夹路径对比判断

    TOP_PATH=${FILE_PATH%/*}                                        # 普通文件路径转换，BT下载文件夹时为顶层文件夹路径，普通单文件下载时与文件路径相同。
    ANI_PATH=${DOWNLOAD_ANI_PATH}/${RELATIVE_ANI_PATH}              # 动画片路径判断
    MOV_PATH=${DOWNLOAD_MOV_PATH}/${RELATIVE_MOV_PATH}              # 电影路径判断
    TVS_PATH=${DOWNLOAD_TVS_PATH}/${RELATIVE_TVS_PATH}              # 电视剧、综艺路径判断
    CUS_PATH=${DOWNLOAD_CUS_PATH}/${RELATIVE_CUS_PATH}              # 自定义路径判断
}

# ========================GET_TARGET_PATH==============================


COMPLETED_PATH() {
    # 完成任务后转移
    TARGET_DIR='/downloads/completed'
    TARGET_ANI_DIR=${TARGET_DIR}/${ANIDIR}
    TARGET_MOV_DIR=${TARGET_DIR}/${MOVDIR}
    TARGET_TVS_DIR=${TARGET_DIR}/${TVDIR}
    TARGET_CUS_DIR=${TARGET_DIR}/${CUSDIR}
}


RECYCLE_PATH() {
    # 回收站
    TARGET_DIR='/downloads/recycle'
    TARGET_ANI_DIR=${TARGET_DIR}/${ANIDIR}
    TARGET_MOV_DIR=${TARGET_DIR}/${MOVDIR}
    TARGET_TVS_DIR=${TARGET_DIR}/${TVDIR}
    TARGET_CUS_DIR=${TARGET_DIR}/${CUSDIR}
}


# ============================颜色==============================

RED_FONT_PREFIX="\033[31m"
LIGHT_GREEN_FONT_PREFIX="\033[1;32m"
YELLOW_FONT_PREFIX="\033[1;33m"
LIGHT_PURPLE_FONT_PREFIX="\033[1;35m"
FONT_COLOR_SUFFIX="\033[0m"
INFO="[${LIGHT_GREEN_FONT_PREFIX}INFO${FONT_COLOR_SUFFIX}]"
ERROR="[${RED_FONT_PREFIX}ERROR${FONT_COLOR_SUFFIX}]"
WARRING="[${YELLOW_FONT_PREFIX}WARRING${FONT_COLOR_SUFFIX}]"

# ============================时间==============================

DATE_TIME() {
    date +"%m/%d %H:%M:%S"
}

# ==========================任务信息===============================

TASK_INFO() {
    echo -e "
-------------------------- [${YELLOW_FONT_PREFIX}TASK INFO${FONT_COLOR_SUFFIX}] --------------------------
${LIGHT_PURPLE_FONT_PREFIX}Download path:${FONT_COLOR_SUFFIX} ${DOWNLOAD_PATH}
${LIGHT_PURPLE_FONT_PREFIX}File path:${FONT_COLOR_SUFFIX} ${FILE_PATH}
${LIGHT_PURPLE_FONT_PREFIX}Source path:${FONT_COLOR_SUFFIX} ${SOURCE_PATH}
${LIGHT_PURPLE_FONT_PREFIX}Target path:${FONT_COLOR_SUFFIX} ${TARGET_PATH}
-------------------------- [${YELLOW_FONT_PREFIX}TASK INFO${FONT_COLOR_SUFFIX}] --------------------------
"
}

# =============================读取conf文件设置=============================

LOAD_SCRIPT_CONF() {
    MIN_SIZE="$(grep ^min-size "${SCRIPT_CONF}" | cut -d= -f2-)"
    INCLUDE_FILE="$(grep ^include-file "${SCRIPT_CONF}" | cut -d= -f2-)"
    EXCLUDE_FILE="$(grep ^exclude-file "${SCRIPT_CONF}" | cut -d= -f2-)"
}

DELETE_EXCLUDE_FILE() {
    if [[ ${FILE_NUM} -gt 1 ]] && [[ -n ${MIN_SIZE} || -n ${INCLUDE_FILE} || -n ${EXCLUDE_FILE} ]]; then
        echo -e "${DATE_TIME} ${INFO} Deleting excluded files ..."
        [[ -n ${MIN_SIZE} ]] && find "${SOURCE_PATH}" -type f -size -${MIN_SIZE} -print0 | xargs -0 rm -vf | tee -a ${CF_LOG_PATH}
        [[ -n ${EXCLUDE_FILE} ]] && find "${SOURCE_PATH}" -type f -regextype posix-extended -iregex ".*\.(${EXCLUDE_FILE})" -print0 | xargs -0 rm -vf | tee -a ${CF_LOG_PATH}
        [[ -n ${INCLUDE_FILE} ]] && find "${SOURCE_PATH}" -type f -regextype posix-extended ! -iregex ".*\.(${INCLUDE_FILE})" -print0 | xargs -0 rm -vf | tee -a ${CF_LOG_PATH}
    fi
}

# =============================删除.ARIA2=============================

RM_ARIA2() {
    if [ -e "${SOURCE_PATH}.aria2" ]; then
        echo -e "${DATE_TIME} ${INFO} deleting ${SOURCE_PATH}.aria2"
        rm -vf "${SOURCE_PATH}.aria2"
    fi
}

# =============================删除空文件夹=============================

DELETE_EMPTY_DIR() {
    if [[ "${DET}" = "true" ]]; then
        echo -e "${DATE_TIME} ${INFO} Deleting empty directory ..."
        find "${SOURCE_PATH}" -depth -type d -empty -exec rm -vrf {} \ ;
    fi
}

# =============================内容过滤=============================

CLEAN_UP() {
    RM_ARIA2
    if [ "$CF" == "true" ]; then
        echo -e "${DATE_TIME} ${INFO} 被过滤文件的任务路径: ${SOURCE_PATH}" | tee -a ${CF_LOG_PATH}
        LOAD_SCRIPT_CONF
        DELETE_EXCLUDE_FILE
        DELETE_EMPTY_DIR
    fi
}

# =============================移动文件=============================

MOVE_FILE() {
    if [ "${MOVE}" = "false" ]; then
        exit 0
    elif [ "${MOVE}" = "dmof" ] && [ "${CONTRAST_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -eq 1 ]; then
        exit 0
    elif [ "${MOVE}" = "true" ] || [ "${MOVE}" = "dmof" ]; then
        TASK_INFO
        echo -e "${DATE_TIME} ${INFO} Start move files ..."
        mkdir -p ${TARGET_PATH}
        mv -f "${SOURCE_PATH}" "${TARGET_PATH}"
        MOVE_EXIT_CODE=$?
        if [ ${MOVE_EXIT_CODE} -eq 0 ]; then
            echo -e "${DATE_TIME} ${INFO} Move done: ${SOURCE_PATH} -> ${TARGET_PATH}"
            [ ${MOVE_LOG} ] && echo -e "${DATE_TIME} [INFO] Move done: ${SOURCE_PATH} -> ${TARGET_PATH}" >>${MOVE_LOG}
        else
            echo -e "${DATE_TIME} ${ERROR} Move failed: ${SOURCE_PATH}"
            [ ${MOVE_LOG} ] && echo -e "${DATE_TIME} [ERROR] Move failed: ${SOURCE_PATH}" >>${MOVE_LOG}
        fi
    fi
}

# =============================删除文件=============================

DELETE_FILE() {
    TASK_INFO
    echo -e "${DATE_TIME} ${INFO} Download stop, start deleting files..."
    rm -rf "${SOURCE_PATH}"
    MOVE_EXIT_CODE=$?
    if [ ${MOVE_EXIT_CODE} -eq 0 ]; then
        echo -e "${DATE_TIME} ${INFO} deleted files: ${SOURCE_PATH}"
        [ ${DELETE_LOG} ] && echo -e "${DATE_TIME} [INFO] File deleted successfully: ${SOURCE_PATH}" >>${DELETE_LOG}
    else
        echo -e "${DATE_TIME} ${ERROR} delete failed: ${SOURCE_PATH}"
        [ ${DELETE_LOG} ] && echo -e "${DATE_TIME} [ERROR] Failed to delete file: ${SOURCE_PATH}" >>${DELETE_LOG}
    fi
}

# =============================回收站=============================

MOVE_RECYCLE() {
    TASK_INFO
    echo -e "${DATE_TIME} ${INFO} Start move files to Recycling Bin..."
    mkdir -p ${TARGET_PATH}
    mv -f "${SOURCE_PATH}" "${TARGET_PATH}"
    MOVE_EXIT_CODE=$?
    if [ ${MOVE_EXIT_CODE} -eq 0 ]; then
        echo -e "${DATE_TIME} ${INFO} Move done: ${SOURCE_PATH} -> ${TARGET_PATH}"
        [ ${RECYCLE_LOG} ] && echo -e "${DATE_TIME} [INFO] Successfully moved to the Recycle Bin: ${SOURCE_PATH} -> ${TARGET_PATH}" >>${RECYCLE_LOG}
    else
        echo -e "${DATE_TIME} ${ERROR} Move failed: ${SOURCE_PATH}"
        [ ${RECYCLE_LOG} ] && echo -e "${DATE_TIME} [ERROR] Failed to move to the Recycle Bin: ${SOURCE_PATH}" >>${RECYCLE_LOG}
    fi
}

# =============================判断文件路径=============================

GET_PATH() {
    if [ "${CONTRAST_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -eq 1 ]; then # 普通单文件下载，移动文件到设定的文件夹。
        SOURCE_PATH="${FILE_PATH}"
        TARGET_PATH="${TARGET_DIR}"
    elif [ "${ANI_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -eq 1 ]; then # 动画片目录中的单文件下载，保留目录结构移动
        SOURCE_PATH="${FILE_PATH}"
        TARGET_PATH="${TARGET_ANI_DIR}"
    elif [ "${MOV_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -eq 1 ]; then # 电影目录中的单文件下载，保留目录结构移动
        SOURCE_PATH="${FILE_PATH}"
        TARGET_PATH="${TARGET_MOV_DIR}"
    elif [ "${TVS_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -eq 1 ]; then # 电视剧目录中的单文件下载，保留目录结构移动
        SOURCE_PATH="${FILE_PATH}"
        TARGET_PATH="${TARGET_TVS_DIR}"
    elif [ "${CUS_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -eq 1 ]; then # 自定义目录中的单文件下载，保留目录结构移动
        SOURCE_PATH="${FILE_PATH}"
        TARGET_PATH="${TARGET_CUS_DIR}"
    elif [ "${ANI_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -gt 1 ]; then # BT下载（动画片文件夹内文件数大于1），移动整个文件夹到设定的文件夹。
        SOURCE_PATH="${CONTRAST_ANI_PATH}"
        TARGET_PATH="${TARGET_ANI_DIR}"
    elif [ "${MOV_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -gt 1 ]; then # BT下载（电影文件夹内文件数大于1），移动整个文件夹到设定的文件夹。
        SOURCE_PATH="${CONTRAST_MOV_PATH}"
        TARGET_PATH="${TARGET_MOV_DIR}"
    elif [ "${TVS_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -gt 1 ]; then # BT下载（电视剧、综艺文件夹内文件数大于1），移动整个文件夹到设定的文件夹。
        SOURCE_PATH="${CONTRAST_TVS_PATH}"
        TARGET_PATH="${TARGET_TVS_DIR}"
    elif [ "${CUS_PATH}" = "${FILE_PATH}" ] && [ ${FILE_NUM} -gt 1 ]; then # 自定义路径下载（自定义路径文件夹内文件数大于1），移动整个文件夹到设定的文件夹。
        SOURCE_PATH="${CONTRAST_CUS_PATH}"
        TARGET_PATH="${TARGET_CUS_DIR}"
    elif [ "${CONTRAST_PATH}" != "${FILE_PATH}" ] && [ ${FILE_NUM} -gt 1 ]; then # BT下载（文件夹内文件数大于1），移动整个文件夹到设定的文件夹。
        SOURCE_PATH="${TOP_PATH}"
        TARGET_PATH_ORIGINAL="${TARGET_DIR}/${RELATIVE_PATH%/*}"
        TARGET_PATH="${TARGET_PATH_ORIGINAL%/*}"
    elif [ "${CONTRAST_PATH}" != "${FILE_PATH}" ] && [ ${FILE_NUM} -eq 1 ]; then # 第三方度盘工具下载（子文件夹或多级目录等情况下的单文件下载）、BT下载（文件夹内文件数等于1），移动文件到设定的文件夹下的相同路径文件夹。
        SOURCE_PATH="${TOP_PATH}"
        TARGET_PATH_ORIGINAL="${TARGET_DIR}/${RELATIVE_PATH%/*}"
        TARGET_PATH="${TARGET_PATH_ORIGINAL%/*}"
    fi
}
